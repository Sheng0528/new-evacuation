from realmap import RoadNetworkSelector
from Dijkstra import dijkstra_all_pairs
from shapely.geometry import Point
import geopandas as gpd


if __name__ == "__main__":
    # 1. 打开路网选择器GUI，进行节点、道路、主干路、集合点等选择
    selector = RoadNetworkSelector(
        location=(43.061936, 141.354292),
        dist=1500,
        location_name="Hokkaido Sapporo"
    )
    # 你需要在弹出的窗口中完成所有选择，然后点击“Complete”

    # 2. 完成选择后，确保网络已生成
    selector.finalize_selection(None)

    # 3. 读取小区/需求区矢量数据并获取形心 假设你有一个小区多边形shapefile（路径为'areas.shp'），并且投影和路网一致
    gdf = gpd.read_file('areas.shp')

    # 如果路网和小区投影不同，你可以这样投影对齐（可选）：
    # gdf = gdf.to_crs(selector.nodes.crs)

    # 计算所有小区的形心
    region_centroids = list(gdf.geometry.centroid)

    # 4. 获取集合点、主干路集合
    gathering_points = list(selector.gathering_points)
    arterial_edges = selector.arterial_edges

    # 5. 计算最短距离和穿越主干路次数
    result = dijkstra_all_pairs(
        selector.selected_G,
        region_centroids,
        gathering_points,
        arterial_edges
    )

    # 6. 输出结果
    for demand_node, d in result.items():
        for gather_node, info in d.items():
            print(f"{demand_node} -> {gather_node}: 距离={info['distance']} 穿越干路={info['arterial_crossings']} 路径={info['path']}")
