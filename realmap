import osmnx as ox
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.widgets import Button
import numpy as np
from shapely.geometry import Point, LineString, Polygon, MultiPolygon
from shapely.ops import polygonize, unary_union, linemerge, snap
from collections import defaultdict
import itertools
import copy

class RoadNetworkSelector:
    def __init__(self, location, dist=1000, location_name=""):
        self.location_name = location_name if location_name else "Selected Area"
        self.G = ox.graph_from_point(location, dist=dist, network_type='drive')
        self.G = ox.project_graph(self.G)
        self.nodes, self.edges = ox.graph_to_gdfs(self.G)
        self.original_G = self.G.copy()
        self.selected_G = nx.MultiDiGraph()
        for key, value in self.original_G.graph.items():
            self.selected_G.graph[key] = value

        self.selected_nodes = set()
        self.selected_edges = set()
        self.arterial_edges = set()
        self.gathering_points = set()
        self.gathering_point_capacities = dict()

        self.mode = 'nodes'
        self.selecting = False
        self.temp_edge = []
        self._history = []  # 撤销历史栈
        self.fig, self.ax = plt.subplots(figsize=(12, 10))
        plt.subplots_adjust(left=0.12, right=0.88, bottom=0.15, top=0.9)
        self._init_view = None
        self.add_buttons()
        self.draw_map(preserve_view=False)
        self.connect_events()
        plt.show()

    def add_buttons(self):
        # 按钮宽高
        button_width = 0.11
        button_height = 0.06
        button_gap = 0.02

        # --- 左侧模式按钮 ---
        left_base = 0.93 - 3 * (button_height + button_gap)
        ax_node = plt.axes([0.015, left_base + 2 * (button_height + button_gap), button_width, button_height])
        self.btn_toggle = Button(ax_node, '节点选择')
        self.btn_toggle.on_clicked(self.toggle_mode)

        ax_arterial = plt.axes([0.015, left_base + 1 * (button_height + button_gap), button_width, button_height])
        self.btn_arterial = Button(ax_arterial, '道路/主干选择')
        self.btn_arterial.on_clicked(self.toggle_arterial)

        ax_gathering = plt.axes([0.015, left_base, button_width, button_height])
        self.btn_gathering = Button(ax_gathering, '集合点选择')
        self.btn_gathering.on_clicked(self.toggle_gathering)

        # --- 右侧缩放按钮 ---
        right_base = 0.93 - 3 * (button_height + button_gap)
        ax_zoom_in = plt.axes([0.87, right_base + 2 * (button_height + button_gap), button_width, button_height])
        self.btn_zoom_in = Button(ax_zoom_in, 'Zoom in')
        self.btn_zoom_in.on_clicked(self.zoom_in)

        ax_zoom_out = plt.axes([0.87, right_base + 1 * (button_height + button_gap), button_width, button_height])
        self.btn_zoom_out = Button(ax_zoom_out, 'Zoom out')
        self.btn_zoom_out.on_clicked(self.zoom_out)

        ax_zoom_reset = plt.axes([0.87, right_base, button_width, button_height])
        self.btn_zoom_reset = Button(ax_zoom_reset, 'Zoom reset')
        self.btn_zoom_reset.on_clicked(self.zoom_reset)

        ax_undo = plt.axes([0.87, right_base - (button_height + button_gap), button_width, button_height])
        self.btn_undo = Button(ax_undo, 'Revoke')
        self.btn_undo.on_clicked(self.undo_action)

        # --- 底部按钮 ---
        ax_done = plt.axes([0.40, 0.03, 0.10, 0.06])
        self.btn_done = Button(ax_done, 'Complete')
        self.btn_done.on_clicked(self.finalize_selection)

        ax_reset = plt.axes([0.53, 0.03, 0.10, 0.06])
        self.btn_reset = Button(ax_reset, 'All reset')
        self.btn_reset.on_clicked(self.reset_selection)

    def draw_map(self, preserve_view=True):
        if preserve_view:
            try:
                xlim = self.ax.get_xlim()
                ylim = self.ax.get_ylim()
            except Exception:
                xlim = ylim = None
        else:
            xlim = ylim = None

        self.ax.clear()
        edges = self.edges.copy()
        edge_colors = ['grey'] * len(edges)
        edge_widths = [1] * len(edges)

        for i, (u, v, k) in enumerate(edges.index):
            if (u, v, k) in self.selected_edges:
                if (u, v, k) in self.arterial_edges:
                    edge_colors[i] = 'black'
                    edge_widths[i] = 4
                else:
                    edge_colors[i] = 'blue'
                    edge_widths[i] = 3

        edges.plot(ax=self.ax, color=edge_colors, linewidth=edge_widths, alpha=0.7)

        node_colors = ['lightgrey'] * len(self.nodes)
        node_sizes = [30] * len(self.nodes)

        for i, node_id in enumerate(self.nodes.index):
            if node_id in self.gathering_points:
                node_colors[i] = 'green'
                node_sizes[i] = 120
            elif node_id in self.selected_nodes:
                node_colors[i] = 'red'
                node_sizes[i] = 100

        self.nodes.plot(ax=self.ax, color=node_colors, markersize=node_sizes, alpha=0.8)
        plt.suptitle(self.location_name, fontsize=16, y=0.98)

        if self.mode == 'nodes':
            subtitle = 'Selection Mode: Nodes - Click on intersections'
            self.btn_toggle.label.set_text('Road Selection')
            self.btn_arterial.label.set_text('MainRoad Selection')
            self.btn_gathering.label.set_text('Gathering Points')
        elif self.mode == 'edges':
            subtitle = 'Selection Mode: Roads - Click two nodes to select shortest path between them'
            self.btn_toggle.label.set_text('Node Selection')
            self.btn_arterial.label.set_text('MainRoad Selection')
            self.btn_gathering.label.set_text('Gathering Points')
        elif self.mode == 'arterial':
            subtitle = 'Selection Mode: Arterial Roads - Click on roads to mark/unmark as arterial'
            self.btn_toggle.label.set_text('Node Selection')
            self.btn_arterial.label.set_text('Road Selection')
            self.btn_gathering.label.set_text('Gathering Points')
        else:
            subtitle = 'Selection Mode: Gathering Points - Click on nodes to mark/unmark as gathering point P'
            self.btn_toggle.label.set_text('Node Selection')
            self.btn_arterial.label.set_text('MainRoad Selection')
            self.btn_gathering.label.set_text('Road Selection')

        plt.title(subtitle, fontsize=12)
        self.ax.set_xlabel('Longitude')
        self.ax.set_ylabel('Latitude')

        for node_id in self.gathering_points:
            if node_id in self.gathering_point_capacities:
                node_geom = self.nodes.loc[node_id].geometry
                cap = self.gathering_point_capacities[node_id]
                self.ax.text(node_geom.x + 10, node_geom.y + 10, f"Capacity: {cap}",
                             fontsize=10, color='darkgreen', ha='left', va='bottom',
                             bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', boxstyle='round,pad=0.2'))

        if not hasattr(self, '_init_view') or self._init_view is None:
            self._init_view = (self.ax.get_xlim(), self.ax.get_ylim())
        if preserve_view and xlim and ylim:
            self.ax.set_xlim(xlim)
            self.ax.set_ylim(ylim)
        elif not preserve_view and hasattr(self, '_init_view') and self._init_view is not None:
            self.ax.set_xlim(self._init_view[0])
            self.ax.set_ylim(self._init_view[1])

        self.fig.canvas.draw_idle()

    def connect_events(self):
        self.cid_click = self.fig.canvas.mpl_connect('button_press_event', self.on_click)

    def toggle_mode(self, event):
        if self.mode == 'nodes':
            self.mode = 'edges'
            self.btn_toggle.label.set_text('Switch to Node Selection')
        else:
            self.mode = 'nodes'
            self.btn_toggle.label.set_text('Switch to Road Selection')
        self.temp_edge = []
        self.draw_map()

    def toggle_arterial(self, event):
        if self.mode == 'arterial':
            self.mode = 'edges'
            self.btn_arterial.label.set_text('Switch to Arterial Selection')
        else:
            self.mode = 'arterial'
            self.btn_arterial.label.set_text('Switch to Road Selection')
        self.temp_edge = []
        self.draw_map()

    def toggle_gathering(self, event):
        if self.mode == 'gathering':
            self.mode = 'edges'
            self.btn_gathering.label.set_text('Switch to Gathering Points')
        else:
            self.mode = 'gathering'
            self.btn_gathering.label.set_text('Switch to Road Selection')
        self.temp_edge = []
        self.draw_map()

    def zoom_in(self, event):
        xlim = self.ax.get_xlim()
        ylim = self.ax.get_ylim()
        xmid = (xlim[0] + xlim[1]) / 2
        ymid = (ylim[0] + ylim[1]) / 2
        scale = 0.5
        xdelta = (xlim[1] - xlim[0]) * scale / 2
        ydelta = (ylim[1] - ylim[0]) * scale / 2
        self.ax.set_xlim([xmid - xdelta, xmid + xdelta])
        self.ax.set_ylim([ymid - ydelta, ymid + ydelta])
        self.fig.canvas.draw_idle()

    def zoom_out(self, event):
        xlim = self.ax.get_xlim()
        ylim = self.ax.get_ylim()
        xmid = (xlim[0] + xlim[1]) / 2
        ymid = (ylim[0] + ylim[1]) / 2
        scale = 2.0
        xdelta = (xlim[1] - xlim[0]) * scale / 2
        ydelta = (ylim[1] - ylim[0]) * scale / 2
        self.ax.set_xlim([xmid - xdelta, xmid + xdelta])
        self.ax.set_ylim([ymid - ydelta, ymid + ydelta])
        self.fig.canvas.draw_idle()

    def zoom_reset(self, event):
        if hasattr(self, '_init_view') and self._init_view is not None:
            self.ax.set_xlim(self._init_view[0])
            self.ax.set_ylim(self._init_view[1])
            self.fig.canvas.draw_idle()

    def on_click(self, event):
        if event.inaxes != self.ax:
            return
        if self.mode == 'nodes':
            self.select_node(event)
        elif self.mode == 'edges':
            self.select_edge(event)
        elif self.mode == 'arterial':
            self.select_arterial(event)
        else:
            self.select_gathering_point(event)

    def select_node(self, event):
        self.save_history()
        x, y = event.xdata, event.ydata
        click_point = Point(x, y)
        min_dist = float('inf')
        nearest_node = None
        for node_id, node_data in self.nodes.iterrows():
            node_geom = node_data.geometry
            dist = node_geom.distance(click_point)
            if dist < min_dist:
                min_dist = dist
                nearest_node = node_id
        if nearest_node is not None and min_dist < 100:
            if nearest_node in self.selected_nodes:
                self.selected_nodes.remove(nearest_node)
                print(f"Node canceled: {nearest_node}")
            else:
                self.selected_nodes.add(nearest_node)
                print(f"Node Selected: {nearest_node}")
            self.draw_map()

    def select_gathering_point(self, event):
        self.save_history()
        x, y = event.xdata, event.ydata
        click_point = Point(x, y)
        min_dist = float('inf')
        nearest_node = None
        for node_id, node_data in self.nodes.iterrows():
            node_geom = node_data.geometry
            dist = node_geom.distance(click_point)
            if dist < min_dist:
                min_dist = dist
                nearest_node = node_id
        if nearest_node is not None and min_dist < 100:
            if nearest_node in self.gathering_points:
                self.gathering_points.remove(nearest_node)
                if nearest_node in self.gathering_point_capacities:
                    del self.gathering_point_capacities[nearest_node]
                print(f"Cancel selecting gathering point:{nearest_node}")
            else:
                self.gathering_points.add(nearest_node)
                if nearest_node not in self.selected_nodes:
                    self.selected_nodes.add(nearest_node)
                try:
                    capacity_str = input(f"Please enter the capacity of gathering point{nearest_node} ：")
                    capacity = int(capacity_str)
                    if capacity > 0:
                        self.gathering_point_capacities[nearest_node] = capacity
                        print(f"Gathering point selected: {nearest_node},Capacity: {capacity}")
                    else:
                        print("Error! Capacity has to be positive int")
                except Exception as e:
                    print(f"Error! Gathering point{e} incorrect")
            self.draw_map()

    def select_edge(self, event):
        self.save_history()
        x, y = event.xdata, event.ydata
        click_point = Point(x, y)
        min_node_dist = float('inf')
        nearest_node = None
        for node_id, node_data in self.nodes.iterrows():
            node_geom = node_data.geometry
            dist = node_geom.distance(click_point)
            if dist < min_node_dist:
                min_node_dist = dist
                nearest_node = node_id

        node_threshold = 40

        if min_node_dist >= node_threshold:
            min_edge_dist = float('inf')
            nearest_edge = None
            for edge_idx in self.selected_edges:
                if edge_idx in self.edges.index:
                    edge_geom = self.edges.loc[edge_idx].geometry
                    dist = edge_geom.distance(click_point)
                    if dist < min_edge_dist:
                        min_edge_dist = dist
                        nearest_edge = edge_idx
            if nearest_edge is not None and min_edge_dist < 30:
                self.selected_edges.remove(nearest_edge)
                if nearest_edge in self.arterial_edges:
                    self.arterial_edges.remove(nearest_edge)
                print(f"Road cancel: {nearest_edge}")
                self.draw_map()
                return

        if nearest_node is not None and min_node_dist < 100:
            self.temp_edge.append(nearest_node)
            print(f"选择节点: {nearest_node}")
            if len(self.temp_edge) == 2:
                start_node, end_node = self.temp_edge
                path = self.find_shortest_path(start_node, end_node)
                if path:
                    if not hasattr(self, 'selected_path_nodes'):
                        self.selected_path_nodes = set()
                    for u, v, k in self.selected_edges:
                        self.selected_path_nodes.add(u)
                        self.selected_path_nodes.add(v)
                    path_set = set(path)
                    self.selected_nodes.add(start_node)
                    self.selected_nodes.add(end_node)
                    common_nodes = path_set & self.selected_path_nodes
                    for node in common_nodes:
                        self.selected_nodes.add(node)
                    self.selected_path_nodes.update(path_set)
                    for i in range(len(path) - 1):
                        u, v = path[i], path[i + 1]
                        if self.original_G.has_edge(u, v):
                            for k in self.original_G.get_edge_data(u, v).keys():
                                self.selected_edges.add((u, v, k))
                                print(f"添加边: ({u}, {v}, {k})")
                    print(f"Edge from{start_node} to {end_node} has been selected")
                self.temp_edge = []
            self.draw_map()

    def select_arterial(self, event):
        self.save_history()
        x, y = event.xdata, event.ydata
        click_point = Point(x, y)
        min_dist = float('inf')
        nearest_node = None
        for node_id, node_data in self.nodes.iterrows():
            node_geom = node_data.geometry
            dist = node_geom.distance(click_point)
            if dist < min_dist:
                min_dist = dist
                nearest_node = node_id
        if nearest_node is not None and min_dist < 100:
            self.temp_edge.append(nearest_node)
            if len(self.temp_edge) == 2:
                start_node, end_node = self.temp_edge
                path = self.find_shortest_path(start_node, end_node)
                if path:
                    if not hasattr(self, 'selected_path_nodes'):
                        self.selected_path_nodes = set()
                    for u, v, k in self.arterial_edges:
                        self.selected_path_nodes.add(u)
                        self.selected_path_nodes.add(v)
                    path_set = set(path)
                    self.selected_nodes.add(start_node)
                    self.selected_nodes.add(end_node)
                    common_nodes = path_set & self.selected_path_nodes
                    for node in common_nodes:
                        self.selected_nodes.add(node)
                    self.selected_path_nodes.update(path_set)
                    for i in range(len(path) - 1):
                        u, v = path[i], path[i + 1]
                        if self.original_G.has_edge(u, v):
                            for k in self.original_G.get_edge_data(u, v).keys():
                                self.selected_edges.add((u, v, k))
                                self.arterial_edges.add((u, v, k))
                self.temp_edge = []
            self.draw_map()

    def find_shortest_path(self, start_node, end_node):
        try:
            path = nx.shortest_path(self.original_G, start_node, end_node, weight='length')
            return path
        except nx.NetworkXNoPath:
            print(f"There is NO edge from node {start_node} to {end_node}")
            return None

    def finalize_selection(self, event):
        if len(self.selected_nodes) == 0:
            print("Haven't select any available node")
            return
        if len(self.selected_edges) == 0:
            print("Haven't select any available edge")
            return

        self.selected_G = nx.MultiDiGraph()
        for key, value in self.original_G.graph.items():
            self.selected_G.graph[key] = value
        for node_id in self.selected_nodes:
            if node_id in self.original_G.nodes:
                node_data = self.original_G.nodes[node_id]
                if node_id in self.gathering_points:
                    node_data['gathering_point'] = True
                self.selected_G.add_node(node_id, **node_data)
        for u, v, k in self.selected_edges:
            if self.original_G.has_edge(u, v, key=k):
                for node in [u, v]:
                    if node not in self.selected_G.nodes and node in self.original_G.nodes:
                        node_data = self.original_G.nodes[node]
                        if node in self.gathering_points:
                            node_data['gathering_point'] = True
                        self.selected_G.add_node(node, **node_data)
                edge_data = self.original_G.get_edge_data(u, v, key=k)
                edge_data['arterial'] = (u, v, k) in self.arterial_edges
                self.selected_G.add_edge(u, v, key=k, **edge_data)
        self.display_selected_network()

    def display_selected_network(self):
        def count_crossings(line, arterial_lines):
            crossings = 0
            for arterial in arterial_lines:
                if arterial.geom_type == 'MultiLineString':
                    sublines = list(arterial.geoms)
                else:
                    sublines = [arterial]
                for subline in sublines:
                    inter = line.intersection(subline)
                    if inter.is_empty:
                        continue
                    if inter.geom_type == 'Point':
                        if not Point(line.coords[0]).equals(inter) and not Point(line.coords[-1]).equals(inter):
                            crossings += 1
                    elif inter.geom_type == 'MultiPoint':
                        for pt in inter.geoms:
                            if not Point(line.coords[0]).equals(pt) and not Point(line.coords[-1]).equals(pt):
                                crossings += 1
            return crossings

        try:
            fig, ax = plt.subplots(figsize=(10, 8))
            nodes, edges = ox.graph_to_gdfs(self.selected_G)
            arterial_lines = []
            arterial_edges_dict = {}
            for (u, v, k) in self.arterial_edges:
                if (u, v, k) in edges.index:
                    edge_geom = edges.loc[(u, v, k)].geometry
                    if edge_geom.geom_type == 'MultiLineString':
                        for line in edge_geom.geoms:
                            arterial_lines.append(line)
                            arterial_edges_dict[line] = (u, v, k)
                    elif edge_geom.geom_type == 'LineString':
                        arterial_lines.append(edge_geom)
                        arterial_edges_dict[edge_geom] = (u, v, k)
            region_centroids = []
            fill_polys = []
            if arterial_lines:
                merged = linemerge(arterial_lines)
                merged = snap(merged, merged, tolerance=1e-6)
                if hasattr(merged, '__iter__'):
                    lines_for_poly = list(merged)
                else:
                    lines_for_poly = [merged]
                polygons = list(polygonize(lines_for_poly))
                for poly in polygons:
                    if poly.area > 10:
                        fill_polys.append(poly)
                region_colors = itertools.cycle([
                    '#FFEDA0', '#A1D99B', '#9ECAE1', '#FEC44F', '#FB6A4A', '#BCBDDC', '#FEE0D2', '#BDBDBD'
                ])
                for idx, poly in enumerate(fill_polys):
                    x, y = poly.exterior.xy
                    ax.fill(x, y, color=next(region_colors), alpha=0.4, label=f'Region {idx + 1}' if idx == 0 else "")
                    centroid = poly.centroid
                    region_centroids.append(centroid)
                    ax.scatter(centroid.x, centroid.y, marker='^', s=150, color="orange", edgecolor="black",
                               label="Needs point" if idx == 0 else "")
                    for p_node in getattr(self, 'gathering_points', []):
                        if p_node in nodes.index:
                            p_geom = nodes.loc[p_node].geometry
                            if poly.contains(p_geom):
                                ax.plot([centroid.x, p_geom.x], [centroid.y, p_geom.y], 'k--', linewidth=1.5)
                                mid_x = (centroid.x + p_geom.x) / 2
                                mid_y = (centroid.y + p_geom.y) / 2
                                ax.text(mid_x, mid_y, '0', fontsize=10, color='blue')
            if len(fill_polys) > 1 and len(self.arterial_edges) > 0:
                poly_edge_map = []
                for poly in fill_polys:
                    coords = list(poly.exterior.coords)
                    segments = []
                    for i in range(len(coords) - 1):
                        seg = LineString([coords[i], coords[i + 1]])
                        segments.append(seg)
                    poly_edge_map.append(segments)
                arterial_match = {}
                for (u, v, k) in self.arterial_edges:
                    if (u, v, k) in edges.index:
                        edge_geom = edges.loc[(u, v, k)].geometry
                        if edge_geom.geom_type == 'MultiLineString':
                            lines = list(edge_geom.geoms)
                        else:
                            lines = [edge_geom]
                        for line in lines:
                            for idx, segments in enumerate(poly_edge_map):
                                for seg in segments:
                                    if seg.intersection(line).length > 1.0:
                                        arterial_match.setdefault((u, v, k), set()).add(idx)
                adjacent_pairs = set()
                for match_idxs in arterial_match.values():
                    if len(match_idxs) == 2:
                        i, j = sorted(match_idxs)
                        adjacent_pairs.add((i, j))
                region_gathering_points = []
                for poly in fill_polys:
                    g_points = []
                    for p_node in getattr(self, 'gathering_points', []):
                        if p_node in nodes.index:
                            p_geom = nodes.loc[p_node].geometry
                            if poly.contains(p_geom):
                                g_points.append((p_node, p_geom))
                    region_gathering_points.append(g_points)
                for i, j in adjacent_pairs:
                    points_i = [region_centroids[i]] + [geom for _, geom in region_gathering_points[i]]
                    points_j = [region_centroids[j]] + [geom for _, geom in region_gathering_points[j]]
                    min_dist = float('inf')
                    best_pair = None
                    for pt1 in points_i:
                        for pt2 in points_j:
                            d = pt1.distance(pt2)
                            if d < min_dist:
                                min_dist = d
                                best_pair = (pt1, pt2)
                    if best_pair:
                        line_between = LineString([best_pair[0], best_pair[1]])
                        crossings = count_crossings(line_between, arterial_lines)
                        ax.plot([best_pair[0].x, best_pair[1].x], [best_pair[0].y, best_pair[1].y],
                                'k-', linewidth=2)
                        mx, my = (best_pair[0].x + best_pair[1].x) / 2, (best_pair[0].y + best_pair[1].y) / 2
                        ax.text(mx, my, str(crossings), fontsize=12, color='purple', weight='bold')

            if len(edges) > 0:
                edge_colors = []
                edge_widths = []
                for _, edge_data in edges.iterrows():
                    if edge_data.get('arterial', False):
                        edge_colors.append('black')
                        edge_widths.append(4)
                    else:
                        edge_colors.append('blue')
                        edge_widths.append(2)
                edges.plot(ax=ax, color=edge_colors, linewidth=edge_widths)
                selected_node_set = set([node for node in self.selected_nodes if node in self.selected_G.nodes()])
                processed_pairs = set()
                edge_lengths = {}
                for u, v, k, data in self.selected_G.edges(keys=True, data=True):
                    if (u, v) in processed_pairs or (v, u) in processed_pairs:
                        continue
                    if u in selected_node_set and v in selected_node_set:
                        length = data.get('length', 0)
                        edge_lengths[(u, v)] = length
                        processed_pairs.add((u, v))
                    elif u in selected_node_set or v in selected_node_set:
                        red_node = u if u in selected_node_set else v
                        other_node = v if red_node == u else u
                        visited = {red_node, other_node}
                        queue = [(other_node, red_node, data.get('length', 0))]
                        while queue:
                            current, start_red, current_length = queue.pop(0)
                            for neighbor in self.selected_G.neighbors(current):
                                if neighbor in visited:
                                    continue
                                edge_keys = list(self.selected_G.get_edge_data(current, neighbor).keys())
                                if edge_keys:
                                    edge_data2 = self.selected_G.get_edge_data(current, neighbor, edge_keys[0])
                                    edge_length = edge_data2.get('length', 0)
                                    total_length = current_length + edge_length
                                    if neighbor in selected_node_set:
                                        if ((start_red, neighbor) not in processed_pairs and
                                                (neighbor, start_red) not in processed_pairs):
                                            edge_lengths[(start_red, neighbor)] = total_length
                                            processed_pairs.add((start_red, neighbor))
                                        break
                                    else:
                                        visited.add(neighbor)
                                        queue.append((neighbor, start_red, total_length))
                for (u, v), length in edge_lengths.items():
                    u_coords = (nodes.loc[u].geometry.x, nodes.loc[u].geometry.y)
                    v_coords = (nodes.loc[v].geometry.x, nodes.loc[v].geometry.y)
                    mid_x = (u_coords[0] + v_coords[0]) / 2
                    mid_y = (u_coords[1] + v_coords[1]) / 2
                    ax.text(mid_x, mid_y, f"{length:.1f}m",
                            fontsize=9, color='green', backgroundcolor='white',
                            ha='center', va='center', weight='bold')
            if len(self.selected_nodes) > 0:
                selected_node_ids = [node_id for node_id in self.selected_nodes if node_id in nodes.index]
                if selected_node_ids:
                    plot_nodes = nodes.loc[selected_node_ids]
                    plot_nodes.plot(ax=ax, color='red', markersize=50)
            for p_node in getattr(self, 'gathering_points', []):
                if p_node in nodes.index:
                    p_geom = nodes.loc[p_node].geometry
                    capacity = self.gathering_point_capacities.get(p_node, None)
                    if capacity is not None:
                        ax.text(p_geom.x, p_geom.y, f"Capacity:{capacity}", fontsize=11, color='darkgreen', weight='bold',
                                ha='left', va='bottom', bbox=dict(facecolor='white', alpha=0.7, edgecolor='green'))
            from matplotlib.lines import Line2D
            legend_elements = [
                Line2D([0], [0], color='blue', linewidth=2, label='Regular Road'),
                Line2D([0], [0], color='black', linewidth=4, label='Arterial Road'),
                Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=8, label='Selected Node'),
                Line2D([0], [0], color='#FFEDA0', lw=10, alpha=0.4, label='Region'),
                Line2D([0], [0], marker='^', color='w', markerfacecolor='orange', markeredgecolor='black',
                       markersize=12, label='Needs point')
            ]
            ax.legend(handles=legend_elements, loc='upper right')
            ax.set_title(f'Selected Road Network - {self.location_name}')
            plt.tight_layout()
            plt.show()
        except ValueError as e:
            print(f"Error happens when selecting: {e}")
            print(f"Total nodes: {len(self.selected_G.nodes)}")
            print(f"Total edges: {self.selected_G.number_of_edges()}")
        except Exception as e:
            print(f"Error happens when getting the map: {e}")
            import traceback
            traceback.print_exc()

    def reset_selection(self, event):
        self.save_history()
        self.selected_nodes = set()
        self.selected_edges = set()
        self.arterial_edges = set()
        self.gathering_points = set()
        self.gathering_point_capacities = dict()
        self.temp_edge = []
        if hasattr(self, 'selected_path_nodes'):
            self.selected_path_nodes = set()
        self.draw_map(preserve_view=False)
        print("All selection reset")

    def save_history(self):
        import copy
        # 深拷贝重要状态
        self._history.append((
            copy.deepcopy(self.selected_nodes),
            copy.deepcopy(self.selected_edges),
            copy.deepcopy(self.arterial_edges),
            copy.deepcopy(self.gathering_points),
            copy.deepcopy(self.gathering_point_capacities),
            copy.deepcopy(self.temp_edge),
            copy.deepcopy(getattr(self, 'selected_path_nodes', set()))
        ))
        if len(self._history) > 100:
            self._history = self._history[-100:]

    def undo_action(self, event):
        if not self._history:
            print("没有可撤销的操作")
            return
        state = self._history.pop()
        (self.selected_nodes,
         self.selected_edges,
         self.arterial_edges,
         self.gathering_points,
         self.gathering_point_capacities,
         self.temp_edge,
         selected_path_nodes) = state
        self.selected_path_nodes = selected_path_nodes
        self.draw_map()
        print("已撤销上一步操作")


if __name__ == "__main__":
    selector = RoadNetworkSelector(
        location=(43.061936, 141.354292),
        dist=1500,
        location_name="Hokkaido Sapporo"
    )
